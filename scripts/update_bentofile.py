#!/usr/bin/env python3
"""
Script to update bentofile.yaml with packages detected by pipreqs.
Run this script from the project root directory.
"""

import yaml
import os
import subprocess

def run_pipreqs():
    """Run pipreqs to generate requirements and return list of packages."""
    try:
        # Run pipreqs on src/serving directory to detect packages used in service.py
        result = subprocess.run(['pipreqs', 'src/serving', '--force'], 
                              capture_output=True, text=True, check=True)
        
        # Read the generated requirements.txt
        requirements_path = 'src/serving/requirements.txt'
        if os.path.exists(requirements_path):
            with open(requirements_path, 'r') as f:
                packages = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            # Clean up the generated file
            os.remove(requirements_path)
            return packages
        else:
            print("No requirements.txt generated by pipreqs")
            return []
            
    except subprocess.CalledProcessError as e:
        print(f"Error running pipreqs: {e}")
        print(f"stderr: {e.stderr}")
        return []
    except FileNotFoundError:
        print("pipreqs not found. Please install it with: pip install pipreqs")
        return []

def update_bentofile():
    """Update bentofile.yaml with detected packages."""
    bentofile_path = "src/serving/bentofile.yaml"
    
    # Get packages from pipreqs
    packages = run_pipreqs()
    
    if not packages:
        print("No packages detected. Using fallback packages based on service.py imports.")
        packages = [
            "bentoml",
            "pydantic"
        ]
    
    # Define the new configuration
    new_config = {
        "service": "service.py:service",
        "include": [
            "service.py"
        ],
        "python": {
            "packages": packages
        }
    }
    
    # Write the updated configuration
    with open(bentofile_path, 'w') as f:
        yaml.dump(new_config, f, default_flow_style=False, sort_keys=False)
    
    print(f"Successfully updated {bentofile_path}")
    print(f"Configuration updated with {len(packages)} packages:")
    for pkg in packages:
        print(f"  - {pkg}")

if __name__ == "__main__":
    update_bentofile()